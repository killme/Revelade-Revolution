// console language standard library

// creates a macro whose body is a format string
// i.e. macro greet [ say Hi, %1! ]
macro = [
    $arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [concatword " $arg" (+ $i 1)]))
]

// binds a key so that it will toggle a variable
// i.e. bindvar 9 thirdperson
bindvar = [
  bind $arg1 [@arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]
bindvarquiet = [
  bind $arg1 [@arg2 (= $@arg2 0)]
]

// same as above, but only binds for edit mode
editbindvar = [
  editbind $arg1 [@arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]
editbindvarquiet = [
  editbind $arg1 [@arg2 (= $@arg2 0)]
]

// binds a key so that it will set a modifier while held down
bindmod = [
  bind $arg1 [@arg2 1; onrelease [@@arg2 0]]
]

// same as above, but only binds for edit mode
editbindmod = [
  editbind $arg1 [@arg2 1; onrelease [@@arg2 0]]
]

quine = [ echo (format "quine = [%1]" $quine) ]

loadsky = [
    skybox $arg1
    if (> $numargs 1) [
        spinsky $arg2
    ] [
        if (!=f $spinsky 0) [spinsky 0]
    ]
]

mapmsg = [ maptitle $arg1 ]

texsky      = [setshader "stdworld"; texture 0 "textures/sky.png"]
texdefault  = [setshader "stdworld"; texture 0 "textures/default.png"]
texerror    = [setshader "stdworld"; texture 0 "textures/notexture.png"]
texload     = [
   if (findfile [packages/@arg1.tex]) [
      exec [packages/@arg1.tex]
   ] [
      error [texload error: @arg1.tex not found]
      texerror
   ]
]

_loading_tex_offset = -1
_loading_tex_amount = -1

dbgtexturepack = 0

texdef = [
    _i = 0
    looplist x $arg2 [
        if (&& (|| (< $_loading_tex_offset 1) (> $_i $_loading_tex_offset))
               (|| (< $_loading_tex_amount 1) (< $_i (+ $_loading_tex_offset $_loading_tex_amount)))) [
            texload (concatword $arg1 $x)
        ]
        _i = (+ $_i 1)
    ]

    if $dbgtexturepack [
        echo [texdef @arg1 -> @_loading_tex_offset : @_loading_tex_amount ( @_i ) ] 
    ]
]

texpack = [
    if (> $numargs 1) [
        _loading_tex_offset = $arg2
        _loading_tex_amount = $arg3
    ]
    
    exec [packages/@arg1/package.cfg]

    _loading_tex_offset = -1
    _loading_tex_amount = -1
]

toupperfirst = [ result (concatword (toupper (substr $arg1 0 1)) (substr $arg1 1)) ]

//////////////////////////////////
// universal scrollwheel + modifier commands:

defaultmodifier = 0
modifier = $defaultmodifier
domodifier = [ modifier = $arg1; onrelease [ modifier = $defaultmodifier ] ]

universaldelta = [
  do [delta_@(if $editing [ result edit ] [ result game ])_@modifier @arg1]
]

delta_game_0 = [ if (= $arg1 1) [ nextweapon -1 ] [ nextweapon 1 ] ]
"delta_game_1" = [
  zfov = (+ $zfov (* $arg1 (div $zfov -5)))
  if (< $zfov 10)  [ zfov = 10 ]
  if (> $zfov 120) [ zfov = 120 ]
  fov $zfov
]

delta_edit_0 = [
    if $blendpaintmode [
        scrollblendbrush $arg1
    ] [
        editfacewentpush $arg1 1 // Fill and Empty cube
    ]
]
delta_edit_1 = [ nodebug [ gridpower (+ $arg1 $gridpower) ] ]
delta_edit_2 = [ editfacewentpush $arg1 0 ] // push face/corners selected
delta_edit_3 = [ editfacewentpush $arg1 2 ] // push corner pointed at by cursor
delta_edit_4 = [ if $blendpaintmode [rotateblendbrush $arg1] [editrotate $arg1] ] // rotate 90 degrees
delta_edit_5 = [ entproperty 0 $arg1 ]  // and the others
delta_edit_6 = [ edittex $arg1 ] // change textures
delta_edit_9 = [ selectbrush $arg1 ] // change heightmap brushes
delta_edit_10 = [ entautoview $arg1 ]
delta_edit_11 = [ entproperty 0 (* $arg1 $multiplier) ]
delta_edit_12 = [ entproperty 1 (* $arg1 $multiplier) ]
delta_edit_13 = [ entproperty 2 (* $arg1 $multiplier) ]
delta_edit_14 = [ entproperty 3 (* $arg1 $multiplier) ]

delta_edit_15 = [ vdelta [voffset (* $arg1 $multiplier2) 0] ] // vSlot: offset H
delta_edit_16 = [ vdelta [voffset 0 (* $arg1 $multiplier2)] ] // vSlot: offset V
delta_edit_17 = [ vdelta [vrotate $arg1] ] // vSlot: rotate
delta_edit_18 = [ vdelta [vscale (if (< $arg1 0) 0.5 2)] ] // vSlot: scale

multiplier = 1
multiplier2 = 1
